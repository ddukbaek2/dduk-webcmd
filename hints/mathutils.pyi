#------------------------------------------------------------------------
# 파이랜스 인텔리센스.
#------------------------------------------------------------------------
# mathutils.pyi
"""블렌더 내장 수학 모듈"""

from typing import Union, Sequence


class Vector:
	"""블렌더에 내장된 가변길이 벡터. 초기화시 입력한 요소 수에 따라 x, y, z, w 사용 가능."""
	...
	
	def __init__(self, seq : Sequence[float]) -> None: ...
	def __getitem__(self, index : int) -> float: ...
	def __setitem__(self, index : int, value : float) -> None: ...
	def __add__(self, other : Vector) -> Vector: ...
	def __sub__(self, other : Vector) -> Vector: ...
	def __mul__(self, other : Union[Vector, float]) -> Vector: ...
	def __truediv__(self, other : float) -> Vector: ...
	def dot(self, other : Vector) -> float: ...
	def cross(self, other : Vector) -> Vector: ...
	def length(self) -> float: ...
	def normalize(self) -> None: ...


class Matrix:
	"""블렌더에 내장된 가변길이 매트릭스."""
	...
	elements : list[list[float]]

	def __init__(self, *args : Union[list[Union[float, int]], tuple[Union[float, int], ...], Matrix]) -> None: ...
	def __getitem__(self, index : Union[int, slice]) -> Union[Matrix, float]: ...
	def __setitem__(self, index : int, value : Union[Sequence[float], float]) -> None: ...
	def __mul__(self, other : Union[Matrix, Vector, float]) -> Union[Matrix, Vector]: ...
	def invert(self) -> None: ...
	def transpose(self) -> Matrix: ...
	def to_3x3(self) -> Matrix: ...
	def to_4x4(self) -> Matrix: ...
	def determinant(self) -> float: ...


class Euler:
	"""블렌더에 내장된 오일러"""
	...

	x : float
	y : float
	z : float
	order : str

	def __init__(self, angles : Sequence[float], order : str = "XYZ") -> None: ...
	def to_matrix(self) -> Matrix: ...
	def to_quaternion(self) -> "Quaternion": ...


class Quaternion:
	"""블렌더에 내장된 쿼터니언"""
	...

	x : float
	y : float
	z : float
	w : float

	def __init__(self, data : Sequence[float]) -> None: ...
	def to_matrix(self) -> Matrix: ...
	def to_euler(self, order : str = "XYZ") -> Euler: ...
